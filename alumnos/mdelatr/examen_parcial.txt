 Examen Parcial
5 de marzo, 2015

Problema 4
0000 0000 0010 1010 
son 16 bits sin signo? = son 16 bits con signo? =42

1000 0000 0010 1010
son 16 bits sin signo? != son 16 bits con signo? 
16 bits sin signo? 32810
16 bits con signo? -42

0000 0000 0010 1010 
2 cadenas de 8 bits sin signo?=2 cadenas de 8 bits con signo?
0000 0000 =0
0010 1010 = 42

1000 0000 0010 1010
2 cadenas de 8 bits sin signo?
1000 0000 =128
0010 1010= 42
2 cadenas de 8 bits con signo?
1000 0000 = -127
0010 1010= 42


Problema 5
el rango es =256 porque el número más chico representable en 8 bits es -127 y el más grande es 128 en enteros, pero en reales, utilizando el hecho que los exponentes se obtienen con 2**0, 2**1 y 2**2 obtuve el más grende 31, y el mas chico -31 entonces el rango ahi es =   62
la precisión es 0.5 si usamos el hecho que el más grande representable es 15.5 pero si usamos que es 31 entonces es cero
La resolución es si no tomamos en cuenta el signo es o.125, pero si lo tomamos es -31 (en el caso que yo entendí que para el exponente tomabamos 2**0, 2**1 y 2**2 )
Los binades posibles dependen de los tres dígitos despues del que guarda el signo, y unos ejemplos son '001' '111' '010', entre otros, por lo que las posibilidades de bínades, es 1, 2 ,3, 4, 5, 6 ya que es 2**0 2**1 y 2**2
Numeros por binade se ven de la siguiente manera 2**binade<=y<2**binade+1 por lo que restando el dos elevado a k+1 menos el elevado al k se puede saber


Problema 6

def binarios():
    signo=['0','1']
    exponente=['111','101','011','110','001','100','010','000']
    factorizacion=['1111','0111','1011','1101','1110','1100','0011','1001','0110','0101','1010','0001','1000','0100','0010','0000']
    combinaciones=[]
    for i in xrange(0,2):
        for j in xrange(0,8):
            for k in xrange(0,16):
                combinaciones.append(signo[i]+exponente[j]+factorizacion[k])
    return combinaciones
    print len(combinaciones)


def convertir(x):
    numero=list(x)
    exp=0
    potencia=0
    frac=0.0
    real=[]
    if numero[0]=='1':
        for i in xrange(0,3):
            exp+=float(numero[i+1])*2**i
        potencia= exp - 3  #Profesor aquí me puse a pensar en lo que usted me dijo, el problema es que 
        # en el caso '1 111 1111' si tomo '111' y lo multiplico como me dijo 2**0+2**1+2**2=7 entonces el 
        #Nùmero ya no me da -15.5, sino '-31' ,  si le muevo el -3 a -4 entonces ya quedaría como usted
        #decía de -15.5 pero no entiendo la lógica de donde saldria como potencia el 3 si el exponente es 
        # siete y el bias 3
        for i in xrange(-4,0):
            frac+=float(numero[i+8])*2**i
        real.append(str((-1)*(1+frac)*2**potencia))
        real.append(str(-1))
        real.append(str(1+frac))
        real.append(str(potencia))
    if numero[0]=='0':
        for i in xrange(0,3):
            exp+=float(numero[i+1])*2**i
        potencia=exp - 3
        for i in xrange(-4,0):
            frac+=float(numero[i+8])*2**i
        real.append(str((1+frac)*(2**potencia)))
        real.append(str(1))
        real.append(str(1+frac))
        real.append(str(potencia))
    return real

combinaciones=binarios()
for i in xrange(0,255):
    real=convertir(combinaciones[i])
    print combinaciones[i], , real[0], ,real[1],*,real[2],* 2**,real[3]

Tambíen cheque el caso en que me debería de dar -15.5 el más chico, y lo hice asi
def convertir(x):
    numero=list(x)
    exp=0
    potencia=0
    frac=0.0
    real=[]
    if numero[0]=='1':
        for i in xrange(0,3):
            exp+=float(numero[i+1])*2**i
        potencia= (exp-1) - 3 
        for i in xrange(-4,0):
            frac+=float(numero[i+8])*2**i
        real.append(str((-1)*(1+frac)*2**potencia))
        real.append(str(-1))
        real.append(str(1+frac))
        real.append(str(potencia))
    if numero[0]=='0':
        for i in xrange(0,3):
            exp+=float(numero[i+1])*2**i
        potencia=(exp-1) - 3 
        for i in xrange(-4,0):
            frac+=float(numero[i+8])*2**i
        real.append(str((1+frac)*(2**potencia)))
        real.append(str(1))
        real.append(str(1+frac))
        real.append(str(potencia))
    return real

convertir('11111111')
['-15.5', '-1', '1.9375', '3.0']

01111111   15.5   1 * 1.9375 * 2** 3.0
01110111   15.0   1 * 1.875 * 2** 3.0
01111011   14.5   1 * 1.8125 * 2** 3.0
01111101   13.5   1 * 1.6875 * 2** 3.0
01111110   11.5   1 * 1.4375 * 2** 3.0
01111100   9.5   1 * 1.1875 * 2** 3.0
01110011   14.0   1 * 1.75 * 2** 3.0
01111001   12.5   1 * 1.5625 * 2** 3.0
01110110   11.0   1 * 1.375 * 2** 3.0
01110101   13.0   1 * 1.625 * 2** 3.0
01111010   10.5   1 * 1.3125 * 2** 3.0
01110001   12.0   1 * 1.5 * 2** 3.0
01111000   8.5   1 * 1.0625 * 2** 3.0
01110100   9.0   1 * 1.125 * 2** 3.0
01110010   10.0   1 * 1.25 * 2** 3.0
01110000   8.0   1 * 1.0 * 2** 3.0
01011111   3.875   1 * 1.9375 * 2** 1.0
01010111   3.75   1 * 1.875 * 2** 1.0
01011011   3.625   1 * 1.8125 * 2** 1.0
01011101   3.375   1 * 1.6875 * 2** 1.0
01011110   2.875   1 * 1.4375 * 2** 1.0
01011100   2.375   1 * 1.1875 * 2** 1.0
01010011   3.5   1 * 1.75 * 2** 1.0
01011001   3.125   1 * 1.5625 * 2** 1.0
01010110   2.75   1 * 1.375 * 2** 1.0
01010101   3.25   1 * 1.625 * 2** 1.0
01011010   2.625   1 * 1.3125 * 2** 1.0
01010001   3.0   1 * 1.5 * 2** 1.0
01011000   2.125   1 * 1.0625 * 2** 1.0
01010100   2.25   1 * 1.125 * 2** 1.0
01010010   2.5   1 * 1.25 * 2** 1.0
01010000   2.0   1 * 1.0 * 2** 1.0
00111111   7.75   1 * 1.9375 * 2** 2.0
00110111   7.5   1 * 1.875 * 2** 2.0
00111011   7.25   1 * 1.8125 * 2** 2.0
00111101   6.75   1 * 1.6875 * 2** 2.0
00111110   5.75   1 * 1.4375 * 2** 2.0
00111100   4.75   1 * 1.1875 * 2** 2.0
00110011   7.0   1 * 1.75 * 2** 2.0
00111001   6.25   1 * 1.5625 * 2** 2.0
00110110   5.5   1 * 1.375 * 2** 2.0
00110101   6.5   1 * 1.625 * 2** 2.0
00111010   5.25   1 * 1.3125 * 2** 2.0
00110001   6.0   1 * 1.5 * 2** 2.0
00111000   4.25   1 * 1.0625 * 2** 2.0
00110100   4.5   1 * 1.125 * 2** 2.0
00110010   5.0   1 * 1.25 * 2** 2.0
00110000   4.0   1 * 1.0 * 2** 2.0
01101111   0.96875   1 * 1.9375 * 2** -1.0
01100111   0.9375   1 * 1.875 * 2** -1.0
01101011   0.90625   1 * 1.8125 * 2** -1.0
01101101   0.84375   1 * 1.6875 * 2** -1.0
01101110   0.71875   1 * 1.4375 * 2** -1.0
01101100   0.59375   1 * 1.1875 * 2** -1.0
01100011   0.875   1 * 1.75 * 2** -1.0
01101001   0.78125   1 * 1.5625 * 2** -1.0
01100110   0.6875   1 * 1.375 * 2** -1.0
01100101   0.8125   1 * 1.625 * 2** -1.0
01101010   0.65625   1 * 1.3125 * 2** -1.0
01100001   0.75   1 * 1.5 * 2** -1.0
01101000   0.53125   1 * 1.0625 * 2** -1.0
01100100   0.5625   1 * 1.125 * 2** -1.0
01100010   0.625   1 * 1.25 * 2** -1.0
01100000   0.5   1 * 1.0 * 2** -1.0
00011111   1.9375   1 * 1.9375 * 2** 0.0
00010111   1.875   1 * 1.875 * 2** 0.0
00011011   1.8125   1 * 1.8125 * 2** 0.0
00011101   1.6875   1 * 1.6875 * 2** 0.0
00011110   1.4375   1 * 1.4375 * 2** 0.0
00011100   1.1875   1 * 1.1875 * 2** 0.0
00010011   1.75   1 * 1.75 * 2** 0.0
00011001   1.5625   1 * 1.5625 * 2** 0.0
00010110   1.375   1 * 1.375 * 2** 0.0
00010101   1.625   1 * 1.625 * 2** 0.0
00011010   1.3125   1 * 1.3125 * 2** 0.0
00010001   1.5   1 * 1.5 * 2** 0.0
00011000   1.0625   1 * 1.0625 * 2** 0.0
00010100   1.125   1 * 1.125 * 2** 0.0
00010010   1.25   1 * 1.25 * 2** 0.0
00010000   1.0   1 * 1.0 * 2** 0.0
01001111   0.2421875   1 * 1.9375 * 2** -3.0
01000111   0.234375   1 * 1.875 * 2** -3.0
01001011   0.2265625   1 * 1.8125 * 2** -3.0
01001101   0.2109375   1 * 1.6875 * 2** -3.0
01001110   0.1796875   1 * 1.4375 * 2** -3.0
01001100   0.1484375   1 * 1.1875 * 2** -3.0
01000011   0.21875   1 * 1.75 * 2** -3.0
01001001   0.1953125   1 * 1.5625 * 2** -3.0
01000110   0.171875   1 * 1.375 * 2** -3.0
01000101   0.203125   1 * 1.625 * 2** -3.0
01001010   0.1640625   1 * 1.3125 * 2** -3.0
01000001   0.1875   1 * 1.5 * 2** -3.0
01001000   0.1328125   1 * 1.0625 * 2** -3.0
01000100   0.140625   1 * 1.125 * 2** -3.0
01000010   0.15625   1 * 1.25 * 2** -3.0
01000000   0.125   1 * 1.0 * 2** -3.0
00101111   0.484375   1 * 1.9375 * 2** -2.0
00100111   0.46875   1 * 1.875 * 2** -2.0
00101011   0.453125   1 * 1.8125 * 2** -2.0
00101101   0.421875   1 * 1.6875 * 2** -2.0
00101110   0.359375   1 * 1.4375 * 2** -2.0
00101100   0.296875   1 * 1.1875 * 2** -2.0
00100011   0.4375   1 * 1.75 * 2** -2.0
00101001   0.390625   1 * 1.5625 * 2** -2.0
00100110   0.34375   1 * 1.375 * 2** -2.0
00100101   0.40625   1 * 1.625 * 2** -2.0
00101010   0.328125   1 * 1.3125 * 2** -2.0
00100001   0.375   1 * 1.5 * 2** -2.0
00101000   0.265625   1 * 1.0625 * 2** -2.0
00100100   0.28125   1 * 1.125 * 2** -2.0
00100010   0.3125   1 * 1.25 * 2** -2.0
00100000   0.25   1 * 1.0 * 2** -2.0
00001111   0.12109375   1 * 1.9375 * 2** -4.0
00000111   0.1171875   1 * 1.875 * 2** -4.0
00001011   0.11328125   1 * 1.8125 * 2** -4.0
00001101   0.10546875   1 * 1.6875 * 2** -4.0
00001110   0.08984375   1 * 1.4375 * 2** -4.0
00001100   0.07421875   1 * 1.1875 * 2** -4.0
00000011   0.109375   1 * 1.75 * 2** -4.0
00001001   0.09765625   1 * 1.5625 * 2** -4.0
00000110   0.0859375   1 * 1.375 * 2** -4.0
00000101   0.1015625   1 * 1.625 * 2** -4.0
00001010   0.08203125   1 * 1.3125 * 2** -4.0
00000001   0.09375   1 * 1.5 * 2** -4.0
00001000   0.06640625   1 * 1.0625 * 2** -4.0
00000100   0.0703125   1 * 1.125 * 2** -4.0
00000010   0.078125   1 * 1.25 * 2** -4.0
00000000   0.0625   1 * 1.0 * 2** -4.0
11111111   -15.5   -1 * 1.9375 * 2** 3.0
11110111   -15.0   -1 * 1.875 * 2** 3.0
11111011   -14.5   -1 * 1.8125 * 2** 3.0
11111101   -13.5   -1 * 1.6875 * 2** 3.0
11111110   -11.5   -1 * 1.4375 * 2** 3.0
11111100   -9.5   -1 * 1.1875 * 2** 3.0
11110011   -14.0   -1 * 1.75 * 2** 3.0
11111001   -12.5   -1 * 1.5625 * 2** 3.0
11110110   -11.0   -1 * 1.375 * 2** 3.0
11110101   -13.0   -1 * 1.625 * 2** 3.0
11111010   -10.5   -1 * 1.3125 * 2** 3.0
11110001   -12.0   -1 * 1.5 * 2** 3.0
11111000   -8.5   -1 * 1.0625 * 2** 3.0
11110100   -9.0   -1 * 1.125 * 2** 3.0
11110010   -10.0   -1 * 1.25 * 2** 3.0
11110000   -8.0   -1 * 1.0 * 2** 3.0
11011111   -3.875   -1 * 1.9375 * 2** 1.0
11010111   -3.75   -1 * 1.875 * 2** 1.0
11011011   -3.625   -1 * 1.8125 * 2** 1.0
11011101   -3.375   -1 * 1.6875 * 2** 1.0
11011110   -2.875   -1 * 1.4375 * 2** 1.0
11011100   -2.375   -1 * 1.1875 * 2** 1.0
11010011   -3.5   -1 * 1.75 * 2** 1.0
11011001   -3.125   -1 * 1.5625 * 2** 1.0
11010110   -2.75   -1 * 1.375 * 2** 1.0
11010101   -3.25   -1 * 1.625 * 2** 1.0
11011010   -2.625   -1 * 1.3125 * 2** 1.0
11010001   -3.0   -1 * 1.5 * 2** 1.0
11011000   -2.125   -1 * 1.0625 * 2** 1.0
11010100   -2.25   -1 * 1.125 * 2** 1.0
11010010   -2.5   -1 * 1.25 * 2** 1.0
11010000   -2.0   -1 * 1.0 * 2** 1.0
10111111   -7.75   -1 * 1.9375 * 2** 2.0
10110111   -7.5   -1 * 1.875 * 2** 2.0
10111011   -7.25   -1 * 1.8125 * 2** 2.0
10111101   -6.75   -1 * 1.6875 * 2** 2.0
10111110   -5.75   -1 * 1.4375 * 2** 2.0
10111100   -4.75   -1 * 1.1875 * 2** 2.0
10110011   -7.0   -1 * 1.75 * 2** 2.0
10111001   -6.25   -1 * 1.5625 * 2** 2.0
10110110   -5.5   -1 * 1.375 * 2** 2.0
10110101   -6.5   -1 * 1.625 * 2** 2.0
10111010   -5.25   -1 * 1.3125 * 2** 2.0
10110001   -6.0   -1 * 1.5 * 2** 2.0
10111000   -4.25   -1 * 1.0625 * 2** 2.0
10110100   -4.5   -1 * 1.125 * 2** 2.0
10110010   -5.0   -1 * 1.25 * 2** 2.0
10110000   -4.0   -1 * 1.0 * 2** 2.0
11101111   -0.96875   -1 * 1.9375 * 2** -1.0
11100111   -0.9375   -1 * 1.875 * 2** -1.0
11101011   -0.90625   -1 * 1.8125 * 2** -1.0
11101101   -0.84375   -1 * 1.6875 * 2** -1.0
11101110   -0.71875   -1 * 1.4375 * 2** -1.0
11101100   -0.59375   -1 * 1.1875 * 2** -1.0
11100011   -0.875   -1 * 1.75 * 2** -1.0
11101001   -0.78125   -1 * 1.5625 * 2** -1.0
11100110   -0.6875   -1 * 1.375 * 2** -1.0
11100101   -0.8125   -1 * 1.625 * 2** -1.0
11101010   -0.65625   -1 * 1.3125 * 2** -1.0
11100001   -0.75   -1 * 1.5 * 2** -1.0
11101000   -0.53125   -1 * 1.0625 * 2** -1.0
11100100   -0.5625   -1 * 1.125 * 2** -1.0
11100010   -0.625   -1 * 1.25 * 2** -1.0
11100000   -0.5   -1 * 1.0 * 2** -1.0
10011111   -1.9375   -1 * 1.9375 * 2** 0.0
10010111   -1.875   -1 * 1.875 * 2** 0.0
10011011   -1.8125   -1 * 1.8125 * 2** 0.0
10011101   -1.6875   -1 * 1.6875 * 2** 0.0
10011110   -1.4375   -1 * 1.4375 * 2** 0.0
10011100   -1.1875   -1 * 1.1875 * 2** 0.0
10010011   -1.75   -1 * 1.75 * 2** 0.0
10011001   -1.5625   -1 * 1.5625 * 2** 0.0
10010110   -1.375   -1 * 1.375 * 2** 0.0
10010101   -1.625   -1 * 1.625 * 2** 0.0
10011010   -1.3125   -1 * 1.3125 * 2** 0.0
10010001   -1.5   -1 * 1.5 * 2** 0.0
10011000   -1.0625   -1 * 1.0625 * 2** 0.0
10010100   -1.125   -1 * 1.125 * 2** 0.0
10010010   -1.25   -1 * 1.25 * 2** 0.0
10010000   -1.0   -1 * 1.0 * 2** 0.0
11001111   -0.2421875   -1 * 1.9375 * 2** -3.0
11000111   -0.234375   -1 * 1.875 * 2** -3.0
11001011   -0.2265625   -1 * 1.8125 * 2** -3.0
11001101   -0.2109375   -1 * 1.6875 * 2** -3.0
11001110   -0.1796875   -1 * 1.4375 * 2** -3.0
11001100   -0.1484375   -1 * 1.1875 * 2** -3.0
11000011   -0.21875   -1 * 1.75 * 2** -3.0
11001001   -0.1953125   -1 * 1.5625 * 2** -3.0
11000110   -0.171875   -1 * 1.375 * 2** -3.0
11000101   -0.203125   -1 * 1.625 * 2** -3.0
11001010   -0.1640625   -1 * 1.3125 * 2** -3.0
11000001   -0.1875   -1 * 1.5 * 2** -3.0
11001000   -0.1328125   -1 * 1.0625 * 2** -3.0
11000100   -0.140625   -1 * 1.125 * 2** -3.0
11000010   -0.15625   -1 * 1.25 * 2** -3.0
11000000   -0.125   -1 * 1.0 * 2** -3.0
10101111   -0.484375   -1 * 1.9375 * 2** -2.0
10100111   -0.46875   -1 * 1.875 * 2** -2.0
10101011   -0.453125   -1 * 1.8125 * 2** -2.0
10101101   -0.421875   -1 * 1.6875 * 2** -2.0
10101110   -0.359375   -1 * 1.4375 * 2** -2.0
10101100   -0.296875   -1 * 1.1875 * 2** -2.0
10100011   -0.4375   -1 * 1.75 * 2** -2.0
10101001   -0.390625   -1 * 1.5625 * 2** -2.0
10100110   -0.34375   -1 * 1.375 * 2** -2.0
10100101   -0.40625   -1 * 1.625 * 2** -2.0
10101010   -0.328125   -1 * 1.3125 * 2** -2.0
10100001   -0.375   -1 * 1.5 * 2** -2.0
10101000   -0.265625   -1 * 1.0625 * 2** -2.0
10100100   -0.28125   -1 * 1.125 * 2** -2.0
10100010   -0.3125   -1 * 1.25 * 2** -2.0
10100000   -0.25   -1 * 1.0 * 2** -2.0
10001111   -0.12109375   -1 * 1.9375 * 2** -4.0
10000111   -0.1171875   -1 * 1.875 * 2** -4.0
10001011   -0.11328125   -1 * 1.8125 * 2** -4.0
10001101   -0.10546875   -1 * 1.6875 * 2** -4.0
10001110   -0.08984375   -1 * 1.4375 * 2** -4.0
10001100   -0.07421875   -1 * 1.1875 * 2** -4.0
10000011   -0.109375   -1 * 1.75 * 2** -4.0
10001001   -0.09765625   -1 * 1.5625 * 2** -4.0
10000110   -0.0859375   -1 * 1.375 * 2** -4.0
10000101   -0.1015625   -1 * 1.625 * 2** -4.0
10001010   -0.08203125   -1 * 1.3125 * 2** -4.0
10000001   -0.09375   -1 * 1.5 * 2** -4.0
10001000   -0.06640625   -1 * 1.0625 * 2** -4.0
10000100   -0.0703125   -1 * 1.125 * 2** -4.0
10000010   -0.078125   -1 * 1.25 * 2** -4.0

%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pylab import hist, show

#Como lo entendí el número de dígitos de un bínade depende de como varía la parte fraccionaria y eso lo multiplicas por 
#dos ya que es lo positivo y lo negativo, por lo que para cada bínade hay el mismo número de dígitos, que es 16
#Los números normalizados con exponente k se dice que percenecen al binade k, por lo que con las 
#distintas combinaciones como por ejemplo '010', '111' obtenemos los valores que puede tener k y los represente en x
x=1,2,3,4,5,6,7
y=[16,16,16,16,16,16,16]
# Histograma de los datos

plt.ylabel(u'Número de dígitos en un binade',fontsize=20)
plt.xlabel(u'bínade-k',fontsize=20)
plt.title(u'Histograma de Bínade',fontsize=20)


plt.axis([0, 10, 0, 20])
plt.xticks(fontsize=20)
plt.yticks(fontsize=20)
plt.grid();

Pero como así no funciono trate de hacerlo normalizado como el ejemplo en clase
Aunque eso no me salía con los datos que yo esperaba entonces lo borre, lo único que agregue a la pasadda fue este renglón
plt.hist(x, y, facecolor='g', alpha=0.75)

Problema 7
x = single(77777.0)
y = single(7.0)
inv_y = 1.0 / y

z = x / y
z1 = x * inv_y

if (z != z1):
  sprintf(%1.3f != %1.3f, z, z1)
  sprintf(%1.30f != %1.30f, z, z1)
else:
  sprintf(%1.3f == %1.3f, z, z1)
  sprintf(%1.30f == %1.30f, z, z1)
endif

Primero la x la defino como 77777 y la 'y' como 7
Luego el inverso de y como 1/'y'
defino 'z' como el valor de 'x'/y'
y z1 como x* (inverso de y)
en teorìa nosotros sabemos que deberia de dar lo mismo pero vamos a ver que hay un error relativo de redondeo
para ver esto pusimos la condicion de que si z es diferente a z1 entonces
nos va a imprimir que 1.3f es diferente a 1.3f y que 1.30f es diferente a 1.30f
en caso de que sean iguales z y z1 nos va a imprimir que son iguales
en octave salio 
ans = 11111.000 != 11111.001
ans = 11111.000000000000000000000000000000 != 11111.000976562500000000000000000000
Por lo que si saliò lo que yo esperaba
Z, z1 son single presision porque asì asigne mis valores a traves de single


x = 77777.0
y = 7.0
inv_y = 1.0 / y

z = x / y
z1 = x * inv_y

if (z != z1)
  sprintf(%1.3f != %1.3f, z, z1)
  sprintf(%1.30f != %1.30f, z, z1)
else
  sprintf(%1.3f == %1.3f, z, z1)
  sprintf(%1.30f == %1.30f, z, z1)
endif


Z, z1 son double precision porque el valor absoluto de r tiene que ser menor al epsilon DP y mis valores
los asigne como flotantes y z y z1 vienen de una computación previa (Esto lo vimos en clase)

Problema 8

import numpy as np

def algoritmo(n, x):
    suma=0
    suma1=0
    suma2=0
    y=0
    for j in xrange(0,n):
        suma1+=x[j]
    y == suma1*((1.0)/n)
    for i in xrange (0,n):
        suma+=(x[i]-y)**2
    suma2=(1.0/n-1)*suma
    print suma2

def algoritmoeficiente(n, x):
    suma=0
    suma1=0
    varianza_muestral0=0
    varianza_muestral=0
    for i in xrange(0,n):
        suma+= x[i]*x[i]
    for j in xrange(0,n):
        suma1+=x[j]
    sumas=(suma1**2)*((1.0)/n)
    varianza_muestral= (suma-(sumas))*(1.0/(n-1))
    print varianza_muestral

x=[10000,10001,10002]
n=len(x)
algoritmoeficiente(n,x)
algoritmo(n,x)

El problema es que el no eficiente acumula mas errores durante el proceso, y mi 'y' definida en mi función la toma como
cero entonces ya con eso sale negativo toda la varianza muestral

El algoritmoeficiente si me salió como resultado 1.0 mientras que para la otra función me salió un valor negativo

Problema 9


from math import exp

def factorial(n):
    if n == 0:
        return 1
    elif n == 1:
        return 1
    else:
        return factorial(n-1)*n

def exp_maclaurin(x,n):
    suma=0
    for i in xrange(0,n):
        suma+=x**i/factorial(i)
    suma=float(suma)
    for i in xrange(0,n+1):
        print %12st%12st%12st%12st%20st%20s % (i, x, x**i, factorial(i), x**i/factorial(i), suma)

exp(0), exp(1), exp(5.5), exp (-5.5)

(1.0, 2.718281828459045, 244.69193226422038, 0.004086771438464067)

exp_maclaurin(0,20)
print ' ' 
exp_maclaurin(1,20)
print ' ' 
exp_maclaurin(5.5,20)
print ' ' 
exp_maclaurin(-5.5,20)

     0           0           101,            101,                    101,                  1.0
           101,            0           0           101,                    0                 1.0
           2           0           0           2                   0                 1.0
           3           0           0           6                   0                 1.0
           41,            0           0          24                   0                 1.0
           5           0           0         120                   0                 1.0
           6           0           0         720                   0                 1.0
           7           0           0        5040                   0                 1.0
           8           0           0       40320                   0                 1.0
           9           0           0      362880                   0                 1.0
          101,            0           0     3628800                   0                 1.0
          11           0           0    39916800                   0                 1.0
          12           0           0   479001600                   0                 1.0
          13           0           0  6227020800                   0                 1.0
          14           0           0 87178291200                   0                 1.0
          15           0           01307674368000                   0                 1.0
          16           0           020922789888000                   0                 1.0
          17           0           0355687428096000                   0                 1.0
          18           0           06402373705728000                   0                 1.0
          19           0           0121645100408832000                   0                 1.0
          20           0           02432902008176640000                   0                 1.0
 
           0           101,            101,            101,                    101,                  2.0
           101,            101,            101,            101,                    101,                  2.0
           2           101,            101,            2                   0                 2.0
           3           101,            101,            6                   0                 2.0
           41,            101,            101,           24                   0                 2.0
           5           101,            101,          120                   0                 2.0
           6           101,            101,          720                   0                 2.0
           7           101,            101,         5040                   0                 2.0
           8           101,            101,        40320                   0                 2.0
           9           101,            101,       362880                   0                 2.0
          101,            101,            101,      3628800                   0                 2.0
          11           101,            101,     39916800                   0                 2.0
          12           101,            101,    479001600                   0                 2.0
          13           101,            101,   6227020800                   0                 2.0
          14           101,            101,  87178291200                   0                 2.0
          15           101,            101, 1307674368000                   0                 2.0
          16           101,            101, 20922789888000                   0                 2.0
          17           101,            101, 355687428096000                   0                 2.0
          18           101,            101, 6402373705728000                   0                 2.0
          19           101,            101, 121645100408832000                   0                 2.0
          20           101,            101, 2432902008176640000                   0                 2.0
 
           0         5.5         1.0           101,                  1.0        244.69157688
           101,          5.5         5.5           101,                  5.5        244.69157688
           2         5.5       30.25           2              15.125        244.69157688
           3         5.5     166.375           6       27.7291666667        244.69157688
           41,          5.5    915.0625          24       38.1276041667        244.69157688
           5         5.5  5032.84375         120       41.9403645833        244.69157688
           6         5.527680.640625         720       38.4453342014        244.69157688
           7         5.5152243.523438        5040       30.2070483011        244.69157688
           8         5.5837339.378906       40320        20.767345707        244.69157688
           9         5.54605366.58398      362880       12.6911557098        244.69157688
          101,          5.525329516.2119     3628800       6.98013564041        244.69157688
          11         5.5139312339.166    39916800        3.4900678202        244.69157688
          12         5.5766217865.41   479001600       1.59961441759        244.69157688
          13         5.54214198259.76  6227020800      0.676759945905        244.69157688
          14         5.523178090428.7 87178291200      0.265869978748        244.69157688
          15         5.51.27479497358e+111307674368000     0.0974856588744        244.69157688
          16         5.57.01137235467e+1120922789888000     0.0335106952381        244.69157688
          17         5.53.85625479507e+12355687428096000     0.0108416955182        244.69157688
          18         5.52.12094013729e+136402373705728000    0.00331274029723        244.69157688
          19         5.51.16651707551e+14121645100408832000   0.000958951138671        244.69157688
          20         5.56.4158439153e+142432902008176640000   0.000263711563135        244.69157688
 
           0        -5.5         1.0           101,                  1.0    0.00387821477628
           101,         -5.5        -5.5           101,                 -5.5    0.00387821477628
           2        -5.5       30.25           2              15.125    0.00387821477628
           3        -5.5    -166.375           6      -27.7291666667    0.00387821477628
           41,         -5.5    915.0625          24       38.1276041667    0.00387821477628
           5        -5.5 -5032.84375         120      -41.9403645833    0.00387821477628
           6        -5.527680.640625         720       38.4453342014    0.00387821477628
           7        -5.5-152243.523438        5040      -30.2070483011    0.00387821477628
           8        -5.5837339.378906       40320        20.767345707    0.00387821477628
           9        -5.5-4605366.58398      362880      -12.6911557098    0.00387821477628
          101,         -5.525329516.2119     3628800       6.98013564041    0.00387821477628
          11        -5.5-139312339.166    39916800       -3.4900678202    0.00387821477628
          12        -5.5766217865.41   479001600       1.59961441759    0.00387821477628
          13        -5.5-4214198259.76  6227020800     -0.676759945905    0.00387821477628
          14        -5.523178090428.7 87178291200      0.265869978748    0.00387821477628
          15        -5.5-1.27479497358e+111307674368000    -0.0974856588744    0.00387821477628
          16        -5.57.01137235467e+1120922789888000     0.0335106952381    0.00387821477628
          17        -5.5-3.85625479507e+12355687428096000    -0.0108416955182    0.00387821477628
          18        -5.52.12094013729e+136402373705728000    0.00331274029723    0.00387821477628
          19        -5.5-1.16651707551e+14121645100408832000  -0.000958951138671    0.00387821477628
          20        -5.56.4158439153e+142432902008176640000   0.000263711563135    0.00387821477628



Falla cuando x=1 y en x=-5.5 porque se acumula un error, es decir, con x=1 no lo tomo como flotante entonces al empezar
a dividir entre valores mas altos ya no tomas los decimales, y con el signo -5.5 lo que pasa es que va acumulando
mas errores con cada vez que se cambia el signo en el proceso entonces sale mal el resultado

#cuando x=1 tratare de hacerlo flotante
exp_maclaurin(1.0,20)
#y como vemos ya sale el resultado deseado
#cuando x=-5.5 lo que podemos hacer es acumular más términos en la suma
print  
exp_maclaurin(-5.5,70)
#al sumar más términos ya nos da una solución mas exacta de este problema

 0         1.0         1.0           101,                  1.0       2.71828182846
           101,          1.0         1.0           101,                  1.0       2.71828182846
           2         1.0         1.0           2                 0.5       2.71828182846
           3         1.0         1.0           6      0.166666666667       2.71828182846
           41,          1.0         1.0          24     0.0416666666667       2.71828182846
           5         1.0         1.0         120    0.00833333333333       2.71828182846
           6         1.0         1.0         720    0.00138888888889       2.71828182846
           7         1.0         1.0        5040   0.000198412698413       2.71828182846
           8         1.0         1.0       40320   2.48015873016e-05       2.71828182846
           9         1.0         1.0      362880    2.7557319224e-06       2.71828182846
          101,          1.0         1.0     3628800    2.7557319224e-07       2.71828182846
          11         1.0         1.0    39916800   2.50521083854e-08       2.71828182846
          12         1.0         1.0   479001600   2.08767569879e-09       2.71828182846
          13         1.0         1.0  6227020800   1.60590438368e-10       2.71828182846
          14         1.0         1.0 87178291200   1.14707455977e-11       2.71828182846
          15         1.0         1.01307674368000   7.64716373182e-13       2.71828182846
          16         1.0         1.020922789888000   4.77947733239e-14       2.71828182846
          17         1.0         1.0355687428096000   2.81145725435e-15       2.71828182846
          18         1.0         1.06402373705728000   1.56192069686e-16       2.71828182846
          19         1.0         1.0121645100408832000   8.22063524662e-18       2.71828182846
          20         1.0         1.02432902008176640000   4.11031762331e-19       2.71828182846
 
           0        -5.5         1.0           101,                  1.0    0.00408677143846
           101,         -5.5        -5.5           101,                 -5.5    0.00408677143846
           2        -5.5       30.25           2              15.125    0.00408677143846
           3        -5.5    -166.375           6      -27.7291666667    0.00408677143846
           41,         -5.5    915.0625          24       38.1276041667    0.00408677143846
           5        -5.5 -5032.84375         120      -41.9403645833    0.00408677143846
           6        -5.527680.640625         720       38.4453342014    0.00408677143846
           7        -5.5-152243.523438        5040      -30.2070483011    0.00408677143846
           8        -5.5837339.378906       40320        20.767345707    0.00408677143846
           9        -5.5-4605366.58398      362880      -12.6911557098    0.00408677143846
          101,         -5.525329516.2119     3628800       6.98013564041    0.00408677143846
          11        -5.5-139312339.166    39916800       -3.4900678202    0.00408677143846
          12        -5.5766217865.41   479001600       1.59961441759    0.00408677143846
          13        -5.5-4214198259.76  6227020800     -0.676759945905    0.00408677143846
          14        -5.523178090428.7 87178291200      0.265869978748    0.00408677143846
          15        -5.5-1.27479497358e+111307674368000    -0.0974856588744    0.00408677143846
          16        -5.57.01137235467e+1120922789888000     0.0335106952381    0.00408677143846
          17        -5.5-3.85625479507e+12355687428096000    -0.0108416955182    0.00408677143846
          18        -5.52.12094013729e+136402373705728000    0.00331274029723    0.00408677143846
          19        -5.5-1.16651707551e+14121645100408832000  -0.000958951138671    0.00408677143846
          20        -5.56.4158439153e+142432902008176640000   0.000263711563135    0.00408677143846
          21        -5.5-3.52871415341e+1551090942171709440000  -6.90673141543e-05    0.00408677143846
          22        -5.51.94079278438e+161124000727777607680000   1.72668285386e-05    0.00408677143846
          23        -5.5-1.06743603141e+1725852016738884976640000  -4.12902421575e-06    0.00408677143846
          24        -5.55.87089817274e+17620448401733239439360000   9.46234716109e-07    0.00408677143846
          25        -5.5-3.22899399501e+1815511210043330985984000000  -2.08171637544e-07    0.00408677143846
          26        -5.51.77594669725e+19403291461126605635584000000    4.4036307942e-08    0.00408677143846
          27        -5.5-9.7677068349e+1910888869450418352160768000000  -8.97035902522e-09    0.00408677143846
          28        -5.55.37223875919e+20304888344611713860501504000000   1.76203480852e-09    0.00408677143846
          29        -5.5-2.95473131756e+218841761993739701954543616000000   -3.3417901541e-10    0.00408677143846
          30        -5.51.62510222466e+22265252859812191058636308480000000   6.12661528251e-11    0.00408677143846
          31        -5.5-8.93806223561e+228222838654177922817725562880000000  -1.08698013077e-11    0.00408677143846
          32        -5.54.91593422958e+23263130836933693530167218012160000000   1.86824709976e-12    0.00408677143846
          33        -5.5-2.70376382627e+248683317618811886495518194401280000000  -3.11374516626e-13    0.00408677143846
          34        -5.51.48707010445e+25295232799039604140847618609643520000000   5.03694071013e-14    0.00408677143846
          35        -5.5-8.17888557447e+2510333147966386144929666651337523200000000   -7.9151925445e-15    0.00408677143846
          36        -5.54.49838706596e+26371993326789901217467999448150835200000000   1.20926552763e-15    0.00408677143846
          37        -5.5-2.47411288628e+2713763753091226345046315979581580902400000000   -1.7975568654e-16    0.00408677143846
          38        -5.51.36076208745e+28523022617466601111760007224100074291200000000   2.60172704202e-17    0.00408677143846
          39        -5.5-7.48419148099e+2820397882081197443358640281739902897356800000000  -3.66910223875e-18    0.00408677143846
          40        -5.54.11630531454e+29815915283247897734345611269596115894272000000000   5.04501557828e-19    0.00408677143846
          41,         -5.5-2.263967923e+3033452526613163807108170062053440751665152000000000  -6.76770382453e-20    0.00408677143846
          42        -5.51.24518235765e+311405006117752879898543142606244511569936384000000000   8.86246929402e-21    0.00408677143846
          43        -5.5-6.84850296707e+3160415263063373835637355132068513997507264512000000000  -1.13357165389e-21    0.00408677143846
          44        -5.53.76667663189e+322658271574788448768043625811014615890319638528000000000   1.41696456736e-22    0.00408677143846
          45        -5.5-2.07167214754e+33119622220865480194561963161495657715064383733760000000000  -1.73184558233e-23    0.00408677143846
          46        -5.51.13941968115e+345502622159812088949850305428800254892961651752960000000000   2.07068493539e-24    0.00408677143846
          47        -5.5-6.26680824631e+34258623241511168180642964355153611979969197632389120000000000  -2.42314194567e-25    0.00408677143846
          48        -5.53.44674453547e+3512413915592536072670862289047373375038521486354677760000000000   2.77651681275e-26    0.00408677143846
          49        -5.5-1.89570949451e+36608281864034267560872252163321295376887552831379210240000000000  -3.11649846329e-27    0.00408677143846
          50        -5.51.04264022198e+3730414093201713378043612608166064768844377641568960512000000000000   3.42814830962e-28    0.00408677143846
          51        -5.5-5.73452122089e+371551118753287382280224243016469303211063259720016986112000000000000  -3.69702268684e-29    0.00408677143846
          52        -5.53.15398667149e+3880658175170943878571660636856403766975289505440883277824000000000000   3.91031245723e-30    0.00408677143846
          53        -5.5-1.73469266932e+394274883284060025564298013753389399649690343788366813724672000000000000  -4.05787141789e-31    0.00408677143846
          54        -5.59.54080968125e+39230843697339241380472092742683027581083278564571807941132288000000000000   4.13301718488e-32    0.00408677143846
          55        -5.5-5.24744532469e+4012696403353658275925965100847566516959580321051449436762275840000000000000  -4.13301718488e-33    0.00408677143846
          56        -5.52.88609492858e+41710998587804863451854045647463724949736497978881168458687447040000000000000   4.05921330658e-34    0.00408677143846
          57        -5.5-1.58735221072e+4240526919504877216755680601905432322134980384796226602145184481280000000000000  -3.91678476951e-35    0.00408677143846
          58        -5.58.73043715895e+422350561331282878571829474910515074683828862318181142924420699914240000000000000   3.71419245384e-36    0.00408677143846
          59        -5.5-4.80174043742e+43138683118545689835737939019720389406345902876772687432540821294940160000000000000  -3.46238279596e-37    0.00408677143846
          60        -5.52.64095724058e+448320987112741390144276341183223364380754172606361245952449277696409600000000000000   3.17385089629e-38    0.00408677143846
          61        -5.5-1.45252648232e+45507580213877224798800856812176625227226004528988036003099405939480985600000000000000  -2.86166884092e-39    0.00408677143846
          62        -5.57.98889565276e+4531469973260387937525653122354950764088012280797258232192163168247821107200000000000000   2.53857719759e-40    0.00408677143846
          63        -5.5-4.39389260902e+461982608315404440064116146708361898137544773690227268628106279599612729753600000000000000  -2.21621818837e-41    0.00408677143846
          64        -5.52.41664093496e+47126886932185884164103433389335161480802865516174545192198801894375214704230400000000000000   1.90456250563e-42    0.00408677143846
          65        -5.5-1.32915251423e+488247650592082470666723170306785496252186258551345437492922123134388955774976000000000000000  -1.61155288938e-43    0.00408677143846
          66        -5.57.31033882825e+48544344939077443064003729240247842752644293064388798874532860126869671081148416000000000000000   1.34296074115e-44    0.00408677143846
          67        -5.5-4.02068635554e+4936471110918188685288249859096605464427167635314049524593701628500267962436943872000000000000000  -1.10243045915e-45    0.00408677143846
          68        -5.52.21137749555e+502480035542436830599600990418569171581047399201355367672371710738018221445712183296000000000000000   8.91671694904e-47    0.00408677143846
          69        -5.5-1.21625762255e+51171122452428141311372468338881272839092270544893520369393648040923257279754140647424000000000000000  -7.10752800286e-48    0.00408677143846
          70        -5.56.68941692403e+5111978571669969891796072783721689098736458938142546425857555362864628009582789845319680000000000000000   5.58448628796e-49    0.00408677143846


Problema 10

x=[10000,10001,10002]
    n=len(x)
y= x(1)+x(2)+x(3)
z=y*(1/n)
varianza = (1/(n-1))*((x(1)-z)**2+(x(2)-z)**2+(x(3)-z)**2)
como resultado me sale 1 que es muy diferente a lo que me dio en python para la primer definición


x=[10000,10001,10002]
    n=len(x)
y= x(1)**2+x(2)**2+x(3)**2
z= ((x(1)+x(2)+x(3))**2)*((1)/n)
varianzaeficiente = (y-z)*(1/(n-1))
y me sale como resultado también 1 para la segunda definición

Esto lo hice en octave cuando originalmente lo había hecho en python

para la otra pregunta:
La diferencia en usar 16, 32 o 64 bits consiste en cuantos números se pueden representar, entre más bits
mayor capacidad de representación posible, ya que puede haber más combinaciónes de numeros binarios

